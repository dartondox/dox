{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>A perfect solution for your web backend development with dart, a comprehensive and versatile framework that offers a wide range of features to help you build powerful and scalable web applications.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Our framework comes equipped with a robust query builder that allows you to easily interact with your database, as well as a model system that simplifies the process of managing your application data. With support for both WebSocket and REST API protocols, you can build real-time applications that are optimized for performance and efficiency. In addition, our database migration system makes it easy to keep your application up-to-date and running smoothly.</p> <p>We understand the importance of security in web applications, which is why our framework offers built-in support for CORS (Cross-Origin Resource Sharing) to help protect against malicious attacks.</p> <p>But that's not all - our framework also includes a powerful CLI (Command-Line Interface) that enables you to quickly create new projects, models, controllers, and middleware with just a few simple commands. This makes it easy to get started with your web development projects and streamline your workflow.</p> <p>Overall, our Dox - dart web framework is the ultimate solution for developers looking to build high-quality web applications with ease. So why wait? Try it out now and experience the power and flexibility of our framework for yourself!</p>"},{"location":"#features","title":"Features","text":"<p>MultiThread HTTP Server: Dox support multi-threaded HTTP server using isolates that can handle 10x concurrency requests with high speed.</p> <p>Modular Architecture: Dox follows a modular architecture, making it easy to extend and customize functionalities based on project requirements.</p> <p>Scalability: Dox is designed to handle high traffic and scale effortlessly as your web application grows.</p> <p>Developer Friendly: With its intuitive APIs and clear documentation, Dox makes it easier for developers to create and maintain web applications.</p> <p>Simple, Fast Routing: Dox offers a simple and efficient routing system, allowing developers to define and handle routes easily for building robust web applications. </p> <p>ORM Support with Strong Query Builder: Dox provides an ORM (Object-Relational Mapping) system along with a powerful query builder, enabling developers to interact with databases efficiently.</p> <p>Validation of Request Data: Dox includes built-in validation capabilities, allowing developers to validate incoming request data easily and ensure data integrity.</p> <p>Database Migration: Dox offers database migration support, allowing developers to manage and apply database schema changes seamlessly.</p> <p>Web Socket: Dox provides WebSocket support, enabling real-time communication and bidirectional data exchange between the server and clients.</p> <p>CORS: Dox includes Cross-Origin Resource Sharing (CORS) support, allowing developers to control and manage cross-origin requests for enhanced security.</p> <p>CLI (Command-Line Interface): Dox provides a command-line interface with useful commands to streamline development tasks, such as creating migrations, generating models, and more.</p>"},{"location":"database/migration/","title":"Migration","text":""},{"location":"database/migration/#create-migration","title":"Create migration","text":"Create migration file <pre><code>dox create:migration create_blog_table\n</code></pre> <p>Info</p> <p>This command will produce a migration file within the <code>db/migration</code> directory. In this file, you can make changes to your schema, including creating, updating, or deleting tables.</p>"},{"location":"database/migration/#run-migration","title":"Run migration","text":"Command <pre><code>dox migrate\n</code></pre> <p>Info</p> <p>Please make sure that you have created <code>.env</code> file with with below variable names to run migration.</p> <pre><code>DB_HOST=localhost\nDB_PORT=5432\nDB_NAME=postgres\nDB_USERNAME=admin\nDB_PASSWORD=password\n</code></pre>"},{"location":"database/migration/#rollback-migration","title":"Rollback migration","text":"Command <pre><code>dox migrate:rollback\n</code></pre>"},{"location":"database/migration/#example","title":"Example","text":"<pre><code>-- up\nCREATE TABLE IF NOT EXISTS blog (\n    id serial PRIMARY KEY,\n    user_id int NOT NULL,\n    title VARCHAR ( 255 ) NOT NULL,\n    slug VARCHAR ( 255 ) NOT NULL,\n    description TEXT,\n    deleted_at TIMESTAMP,\n    created_at TIMESTAMP,\n    updated_at TIMESTAMP \n)\n\n-- down\nDROP TABLE IF EXISTS blog \n</code></pre> <p>Info</p> <p>Employ <code>--up</code> and <code>--down</code> to differentiate the migration scripts for upward and downward actions.</p>"},{"location":"database/query-builder/","title":"Query Builder","text":"<p>Query Builder provides a user-friendly interface where users can define the criteria and parameters for database queries without needing to write the SQL code manually. Query builders are commonly used in database management systems and data analysis tools to streamline the query creation process, making it more accessible to users who may not be proficient in writing SQL queries.</p>"},{"location":"database/query-builder/#create","title":"<code>create</code>","text":"Create <pre><code>await Actor().create(\n    {'name': 'John Wick', 'age': 60}\n);\n</code></pre>"},{"location":"database/query-builder/#insert","title":"<code>insert</code>","text":"InsertMultiple insert <pre><code>await Actor().insert(\n    {'name': 'John Wick', 'age': 60}\n);\n</code></pre> <pre><code>await Actor().insertMultiple([\n    {'name': 'John Wick', 'age': 60},\n    {'name': 'John Doe', 'age': 25},\n]);\n</code></pre>"},{"location":"database/query-builder/#update","title":"<code>update</code>","text":"Update rows <pre><code>await Actor()\n    .where('id', 3)\n    .where('status', 'active')\n    .update({\n        \"name\": \"Updated AJ\",\n        \"age\": 120,\n    });\n</code></pre>"},{"location":"database/query-builder/#count","title":"<code>count</code>","text":"Count allCount with condition <pre><code>await Actor().count();\n</code></pre> <pre><code>await Actor().where('age', '&gt;=' , 23).count();\n</code></pre>"},{"location":"database/query-builder/#find","title":"<code>find</code>","text":"Find by idFind by custom column <pre><code>await Actor().find(id);\n</code></pre> <pre><code>await Actor().find('name', 'John Wick');\n</code></pre>"},{"location":"database/query-builder/#getfirst","title":"<code>getFirst</code>","text":"Get first row <pre><code>Actor actor = await Actor().getFirst(); // limit = 1\n</code></pre>"},{"location":"database/query-builder/#all","title":"<code>all</code>","text":"Ge all rows <pre><code>List&lt;Actor&gt; actors = await Actor().all();\nfor(Actor actor in actors) {\n    print(actor.id)\n}\n</code></pre>"},{"location":"database/query-builder/#get","title":"<code>get</code>","text":"Get <pre><code>List&lt;Actor&gt; actors = await Actor().where('name', 'John Wick').get();\n    for(Actor actor in actors) {\n    print(actor.id)\n}\n</code></pre>"},{"location":"database/query-builder/#tosql","title":"<code>toSql</code>","text":"To SQL query <pre><code>String query = Actor().where('name', 'John Wick').toSql();\nprint(query)\n</code></pre>"},{"location":"database/query-builder/#delete","title":"<code>delete</code>","text":"Delete a row <pre><code>await Actor().where('name', 'John Wick').delete();\n</code></pre>"},{"location":"database/query-builder/#forcedelete","title":"<code>forceDelete</code>","text":"Force delete <pre><code>await Actor().where('name', 'John Wick').forceDelete();\n</code></pre> <p>Info</p> <p>This work only with softDeletes.</p>"},{"location":"database/query-builder/#withtrash","title":"<code>withTrash</code>","text":"Get from trash <pre><code>List actors = await Actor().where('name', 'John Wick').withTrash().get();\nfor(Actor actor in actors) {\n    print(actor.id)\n}\n</code></pre> <p>Info</p> <p>This work only with softDeletes.</p>"},{"location":"database/query-builder/#select","title":"<code>select</code>","text":"Multiple selectSelect with array of columnsSelect with comma separated columns <pre><code>await Actor()\n    .select('id')\n    .select('name')\n    .where('name', 'John Wick').get();\n</code></pre> <pre><code>await Actor()\n    .select(['id', 'name', 'age']).where('name', 'John Wick').get();\n</code></pre> <pre><code>await Actor()\n    .select('id, name, age').where('name', 'John Wick').get();\n</code></pre>"},{"location":"database/query-builder/#wherein","title":"<code>whereIn</code>","text":"Where in condition <pre><code>await Actor().whereIn('id', ['1', '2']).get();\n</code></pre>"},{"location":"database/query-builder/#where","title":"<code>where</code>","text":"whereWhere with custom condition <pre><code>await Actor().where('name', 'John Wick').get();\n</code></pre> <pre><code>await Actor().where('name', '=', 'John Wick').get();\nawait Actor().where('age', '&gt;=', 23).get();\n</code></pre>"},{"location":"database/query-builder/#orwhere","title":"<code>orWhere</code>","text":"orWhereorWhere with custom conditionwhere and orWhere <pre><code>await Actor().orWhere('name', 'John Wick').get();\n</code></pre> <pre><code>await Actor().orWhere('name', '=', 'John Wick').get();\nawait Actor().orWhere('age', '&gt;=', 23).get();\n</code></pre> <pre><code>await Actor()\n.where('name', 'John Doe').orWhere('name', 'John Wick').get();\n</code></pre>"},{"location":"database/query-builder/#whereraw","title":"<code>whereRaw</code>","text":"whereRaw <pre><code>await Actor().whereRaw('name = @name', {'name', 'John Wick'}).get();\n</code></pre>"},{"location":"database/query-builder/#orwhereraw","title":"<code>orWhereRaw</code>","text":"Or where raw <pre><code>await Actor().orWhereRaw('name = @name', {'name', 'John Wick'}).get();\n</code></pre>"},{"location":"database/query-builder/#limit-take-offset","title":"<code>limit</code>, <code>take</code>, <code>offset</code>","text":"LimitTakeoffset <pre><code>await Actor().limit(10).get();\n</code></pre> <pre><code>await Actor().take(10).get();\n</code></pre> <pre><code>await Actor().limit(10).offset(10).get();\n</code></pre> <p>Info</p> <p>Limit and take are the same function.</p>"},{"location":"database/query-builder/#groupby","title":"<code>groupBy</code>","text":"Group by <pre><code>await Actor()\n    .select('count(*) as total, name').groupBy('name').get();\n</code></pre>"},{"location":"database/query-builder/#orderby","title":"<code>orderBy</code>","text":"defaultdescascmultiple columns <pre><code>await Actor().orderBy('name').get();\n</code></pre> <pre><code>await Actor().orderBy('name', 'desc').get();\n</code></pre> <pre><code>await Actor().orderBy('name', 'desc').get();\n</code></pre> <pre><code>await Actor()\n    .orderBy('name', 'asc')\n    .orderBy('id', 'desc')\n    .get();\n</code></pre>"},{"location":"database/query-builder/#join","title":"<code>join</code>","text":"Join <pre><code>await Actor()\n    .join('actor_info', 'actor_info.admin_id', 'admin.id')\n    .get();\n</code></pre>"},{"location":"database/query-builder/#leftjoin","title":"<code>leftJoin</code>","text":"Left join <pre><code>await Actor()\n    .leftJoin('actor_info', 'actor_info.admin_id', 'admin.id')\n    .get();\n</code></pre>"},{"location":"database/query-builder/#rightjoin","title":"<code>rightJoin</code>","text":"Right join <pre><code>await Actor()\n    .rightJoin('actor_info', 'actor_info.admin_id', 'admin.id')\n    .get();\n</code></pre>"},{"location":"database/query-builder/#joinraw","title":"<code>joinRaw</code>","text":"Join raw <pre><code>await Actor()\n    .joinRaw('actor_info on actor_info.admin_id = admin.id')\n    .get();\n</code></pre>"},{"location":"database/query-builder/#leftjoinraw","title":"<code>leftJoinRaw</code>","text":"Left join raw <pre><code>await Actor()\n    .leftJoinRaw('actor_info on actor_info.admin_id = admin.id')\n    .get();\n</code></pre>"},{"location":"database/query-builder/#rightjoinraw","title":"<code>rightJoinRaw</code>","text":"Right Join Raw <pre><code>await Actor()\n    .rightJoinRaw('actor_info on actor_info.admin_id = admin.id')\n    .get();\n</code></pre>"},{"location":"database/query-builder/#debug","title":"<code>debug</code>","text":"Debug <pre><code>await Actor().debug(true).all();\n</code></pre>"},{"location":"database/model/","title":"Model","text":""},{"location":"database/model/#create","title":"Create","text":"CreateWith migration <pre><code>dox create:model Blog\n</code></pre> <pre><code>dox create:model Blog -m\n</code></pre> <p>Info</p> <p>This will create a blog model inside <code>lib/models</code> folder.</p> <p>Warning</p> <p>Please run <code>dart run build_runner build</code> after new model is created. Alternatively can also run build_runner watch <code>dart run build_runner watch</code> to update changes to generator file</p> Sample Model <pre><code>import 'package:dox_query_builder/dox_query_builder.dart';\npart 'blog.model.g.dart';\n\n@DoxModel()\nclass Blog extends BlogGenerator {\n  @Column()\n  String? title;\n\n  @Column(name: 'title', beforeSave: makeSlug)\n  String? slug;\n\n  @Column()\n  String? status;\n\n  @Column(name: 'body')\n  String? description;\n\n  @Column(name: 'created_at')\n  DateTime? createdAt;\n\n  @Column(name: 'updated_at')\n  DateTime? updatedAt;\n\n  static makeSlug(Map&lt;String, dynamic&gt; map) {\n    return Slugify().slugify(map['title']);\n  }\n}\n</code></pre>"},{"location":"database/model/#model-options","title":"Model options","text":""},{"location":"database/model/#table","title":"<code>table</code>","text":"<pre><code>@DoxModel(table: 'blogs')\n</code></pre> <p>Info</p> <p>Dox adheres to singular table naming conventions, but you can still employ custom table names in your model.</p>"},{"location":"database/model/#primarykey","title":"<code>primaryKey</code>","text":"<pre><code>@DoxModel(primaryKey: 'uid')\n</code></pre>"},{"location":"database/model/#createdat-updatedat","title":"<code>createdAt</code> / <code>updatedAt</code>","text":"<pre><code>@DoxModel(createdAt: 'created_at', updatedAt: 'updated_at')\n</code></pre> <p>Info</p> <p>Dox typically utilizes the columns named <code>created_at</code> and <code>updated_at</code> as timestamp columns by default. However, if you wish to specify custom column names, you can employ the <code>createdAt</code> and <code>updatedAt</code> options.</p>"},{"location":"database/model/#softdelete","title":"<code>softDelete</code>","text":"<pre><code>@DoxModel(softDelete: true)\n</code></pre>"},{"location":"database/model/#table-column","title":"Table column","text":""},{"location":"database/model/#name","title":"Name","text":"DefaultCustom column name <pre><code>@column()\nString? title;\n</code></pre> <pre><code>@column(name: 'user_id')\nString? userId;\n</code></pre>"},{"location":"database/model/#hooks","title":"Hooks","text":"beforeSavebeforeGet <pre><code>@DoxModel()\nclass Blog extends BlogGenerator {\n    @column(beforeSave: getSlugFromTitle)\n    String? slug\n\n    static getSlugFromTitle(Map&lt;String, dynamic&gt; map) {\n        return slugify(map['title']);\n    }\n}\n</code></pre> <pre><code>@DoxModel()\nclass Blog extends BlogGenerator {\n    @column(name: 'published_at', beforeGet: convertToHumanReadable)\n    DateTime? publishedAt\n\n    static convertToHumanReadable(Map&lt;String, dynamic&gt; map) {\n        var format = DateFormat.yMd('us');\n        var dateString = format.format(DateTime.parse(map['published_at']));\n    }\n}\n</code></pre> <p>Warning</p> <p><code>beforeSave</code> and <code>beforeGet</code> hook must be static function inside Model class.</p>"},{"location":"database/model/#save","title":"Save","text":"Save a new record <pre><code>Blog blog = Blog();\nblog.title = 'title';\nawait blog.save();\n</code></pre>"},{"location":"database/model/#to-map","title":"To map","text":"To map <pre><code>Map&lt;String, dynamic&gt; blog = await Blog().find(1).toMap();\n</code></pre>"},{"location":"database/model/#debug","title":"Debug","text":"Debug <pre><code>Blog blog = blog();\nblog.debug(true);\nblog.name = 'John Wick';\nawait blog.save();\n</code></pre> <p>Info</p> <p>Debug <code>true</code> option will print the SQL query in the console/terminal.</p>"},{"location":"database/model/#new-query","title":"New query","text":"<p>Info</p> <p>If you do not want to create new class and reuse existing class to do new query, use can use <code>query()</code> function.</p> Example <pre><code>Blog blog = Blog();\nList Blog&gt; blogs = await blog.where('status', 'active')\n    .where('user', 'super_user').get();\n\n// reset existing get query and make new one using `query()`\nList Blog&gt; blog = await blog.query()\n    .where('status', 'deleted').where('user', 'normal').get();\n</code></pre>"},{"location":"database/model/#hide-column","title":"Hide column","text":"Example <pre><code>@DoxModel()\nclass User extends UserGenerator {\n    @override\n    List String&gt; get hidden =&gt; ['password', 'remember_token'];\n}\n</code></pre>"},{"location":"database/model/serializer/","title":"Serializer","text":"<p>Serializers are employed to transform the controller's response before sending it as an HTTP response.</p>"},{"location":"database/model/serializer/#create-a-serializer","title":"Create a serializer","text":"<pre><code>dox create:serializer Blog\n</code></pre>"},{"location":"database/model/serializer/#usage","title":"Usage","text":"SerializerControllerResponse <pre><code>class BlogSerializer extends Serializer&lt;Blog&gt; {\n    BlogSerializer(super.data);\n\n    @override\n    Map&lt;String, dynamic&gt; convert(Blog m) {\n        return {\n            'uid': m.id,\n            'title_en' : m.title,\n        };\n    }\n}\n</code></pre> <pre><code>class BlogController {\n    getAllBlogs(DoxRequest req) async {\n        List&lt;Blog&gt; blogs = await Blog().all();\n\n        /// you can pass as list of data\n        return BlogSerializer(blogs);\n    }\n\n    findBlog(DoxRequest req, id) async {\n        Blog blog = await Blog().find(id);\n\n        /// or you can also pass as single data\n        return BlogSerializer(blog);\n    }\n}\n</code></pre> <pre><code>{\n    \"uid\" : \"1\",\n    \"title_en\": \"This is title\"\n}\n</code></pre> <p>Info</p> <p>You can pass as list of data or single data into the serializer. Just make sure that you have injected your model type in serializer <code>Serializer&lt;Blog&gt;</code>.</p>"},{"location":"database/model/relationship/belongs-to/","title":"BelongsTo","text":"<p>A \"belongs-to\" relationship is a fundamental concept in database modeling. Consider a scenario where we have a <code>Comment</code> model associated with a <code>User</code> model. In this case, we define a method called <code>user</code> within the <code>Comment</code> model. This <code>user</code> method invokes the <code>BelongsTo</code> method and returns its output. This relationship signifies that a comment belongs to a particular user.</p> <p>In practical terms, this means that each comment in our database is linked to a single user. When we want to retrieve the user associated with a specific comment, we can use the <code>user</code> method, making it easy to access user information for that comment. This <code>BelongsTo</code> relationship helps establish connections between records in a meaningful way, enhancing the organization and retrieval of data in our database system.</p> BelongsTo Class Structure <pre><code>class BelongsTo {\n    final Type model;\n    final String? foreignKey;\n    final String? localKey;\n    final Function? onQuery;\n    final bool? eager;\n\n    const BelongsTo(this.model,\n        {this.foreignKey, this.localKey, this.onQuery, this.eager});\n}\n</code></pre>"},{"location":"database/model/relationship/belongs-to/#_1","title":"BelongsTo","text":"User ModelComment Model <pre><code>@DoxModel()\nclass User extends UserGenerator {\n    @Column()\n    String? name;\n\n    @Column()\n    String? status;\n}\n</code></pre> <pre><code>@DoxModel()\nclass Comment extends CommentGenerator {\n    @Column()\n    String? userId;\n\n    @Column()\n    String? content;\n\n    @BelongsTo(User)\n    User? user;\n}\n</code></pre>"},{"location":"database/model/relationship/belongs-to/#usage","title":"Usage","text":""},{"location":"database/model/relationship/belongs-to/#getrelation","title":"<code>$getRelation</code>","text":"<pre><code>List&lt;Comment&gt; comments = await Comment().all();\n\nfor (Comment comment in comments) {\n    await comment.$getRelation('user')\n    User user = comment.user;\n}\n</code></pre> <p>Info</p> <p>When <code>eager</code> is <code>true</code> the <code>$getRelation</code> do not need to call.</p>"},{"location":"database/model/relationship/belongs-to/#preload","title":"<code>preload</code>","text":"<pre><code>List&lt;Comment&gt; comments = await Comment().preload('user').all();\nfor (Comment comment in comments) {\n    User user = comment.user;\n}\n</code></pre> <p>Info</p> <p>When <code>eager</code> is <code>true</code> the <code>preload</code> do not need to call.</p>"},{"location":"database/model/relationship/belongs-to/#related","title":"<code>related</code>","text":"<pre><code>List&lt;Comment&gt; comments = await Comment().all();\n\nfor (Comment comment in comments) {\n    User user = await comment.related&lt;User&gt;('user')?.where('foo', 'bar').getFirst();\n}\n</code></pre>"},{"location":"database/model/relationship/belongs-to/#options","title":"Options","text":""},{"location":"database/model/relationship/belongs-to/#model","title":"<code>model</code>","text":"<pre><code>@BelongsTo(User)\nUser? user;\n</code></pre>"},{"location":"database/model/relationship/belongs-to/#foreignkey","title":"<code>foreignKey</code>","text":"<pre><code>@BelongsTo(User, foreignKey: 'user_id')\nUser? user;\n</code></pre>"},{"location":"database/model/relationship/belongs-to/#localkey","title":"<code>localKey</code>","text":"<pre><code>@BelongsTo(User, foreignKey: 'user_id', localKey: 'id')\nUser? user;\n</code></pre>"},{"location":"database/model/relationship/belongs-to/#onquery","title":"<code>onQuery</code>","text":"<pre><code>@DoxModel()\nclass Comment extends CommentGenerator {\n    @Column()\n    String? userId;\n\n    @Column()\n    String? content;\n\n    @BelongsTo(User, onQuery: onQueryActiveUser)\n    User? activeUser;\n\n    static QueryBuilder&lt;User&gt; onQueryActiveUser(User q) {\n        return q.where('status', 'active');\n    }\n}\n</code></pre> <p>Info</p> <p><code>onQuery</code> method must be a static method inside the model.</p>"},{"location":"database/model/relationship/belongs-to/#eager","title":"<code>eager</code>","text":"<pre><code>@BelongsTo(User, eager: true)\nUser? user;\n</code></pre>"},{"location":"database/model/relationship/has-many/","title":"HasMany","text":"<p>A \"one-to-many\" relationship is another essential type of database association. Let's illustrate this with an example where we have a <code>User</code> model associated with a <code>Post</code> model. To establish this connection, we define a method called <code>posts</code> within the <code>User</code> model. This <code>posts</code> method invokes the <code>HasMany</code> method and returns its output, representing that a user can have multiple posts in the database. This relationship allows us to easily retrieve all the posts associated with a specific user when needed.</p> HasMany Class Structure <pre><code>class HasMany {\n    final Type model;\n    final String? foreignKey;\n    final String? localKey;\n    final Function? onQuery;\n    final bool? eager;\n\n    const HasMany(this.model,\n        {this.foreignKey, this.localKey, this.onQuery, this.eager});\n}\n</code></pre>"},{"location":"database/model/relationship/has-many/#_1","title":"HasMany","text":"User ModelPost Model <pre><code>@DoxModel()\nclass User extends UserGenerator {\n    @Column()\n    String? name;\n\n    @HasMany(Post)\n    Post? posts;\n}\n</code></pre> <pre><code>@DoxModel()\nclass Post extends PostGenerator {\n    @Column()\n    String? userId;\n\n    @Column()\n    String? title;\n\n    @Column(name: 'desc')\n    String? description;\n\n    @Column()\n    String? status;\n}\n</code></pre>"},{"location":"database/model/relationship/has-many/#usage","title":"Usage","text":""},{"location":"database/model/relationship/has-many/#getrelation","title":"<code>$getRelation</code>","text":"<pre><code>User? user = await User().find(1);\nawait user?.$getRelation('blogs')\n\nList&lt;Blog&gt; blogs = user?.blogs;\n</code></pre> <p>Info</p> <p>When <code>eager</code> is <code>true</code> the <code>$getRelation</code> do not need to call.</p>"},{"location":"database/model/relationship/has-many/#preload","title":"<code>preload</code>","text":"<pre><code>User? user = await User().preload('blogs').find(1);\nList&lt;Blog&gt; blogs = user?.blogs;\n</code></pre> <p>Info</p> <p>When <code>eager</code> is <code>true</code> the <code>preload</code> do not need to call.</p>"},{"location":"database/model/relationship/has-many/#related","title":"<code>related</code>","text":"<pre><code>User? user = await User().find(1);\nList&lt;Blog&gt; activeBlogs = await user?.related&lt;Blog&gt;('blog')?.where('status', 'active').get();\n</code></pre>"},{"location":"database/model/relationship/has-many/#options","title":"Options","text":""},{"location":"database/model/relationship/has-many/#model","title":"<code>model</code>","text":"<pre><code>@HasMany(Post)\nPost? posts;\n</code></pre>"},{"location":"database/model/relationship/has-many/#foreignkey","title":"<code>foreignKey</code>","text":"<pre><code>@HasMany(Post, foreignKey: 'user_id')\nPost? posts;\n</code></pre>"},{"location":"database/model/relationship/has-many/#localkey","title":"<code>localKey</code>","text":"<pre><code>@HasMany(Post, foreignKey: 'user_id', localKey: 'id')\nPost? posts;\n</code></pre>"},{"location":"database/model/relationship/has-many/#onquery","title":"<code>onQuery</code>","text":"<pre><code>@DoxModel()\nclass User extends UserGenerator {\n    @HasMany(Post)\n    Post? posts;\n\n    @HasMany(Post, onQuery: activePostQuery)\n    Post? activePosts;\n\n    static QueryBuilder&lt;Post&gt; activePostQuery(Post q) {\n        return q.where('status', 'active');\n    }\n}\n</code></pre> <p>Info</p> <p><code>onQuery</code> method must be a static method inside the model.</p>"},{"location":"database/model/relationship/has-many/#eager","title":"<code>eager</code>","text":"<pre><code>@HasMany(Post, eager: true)\nPost? posts;\n</code></pre>"},{"location":"database/model/relationship/has-one/","title":"HasOne","text":"<p>A one-to-one relationship represents a fundamental type of database association. As an example, consider a <code>User</code> model linked to a <code>UserInfo</code> model. To establish this connection, we define a method called <code>userInfo</code> within the <code>User</code> model. This <code>userInfo</code> method invokes the <code>HasOne</code> method and returns its output.</p> HasOne Class Structure <pre><code>class HasOne {\n    final Type model;\n    final String? foreignKey;\n    final String? localKey;\n    final Function? onQuery;\n    final bool? eager;\n\n    const HasOne(this.model,\n        {this.foreignKey, this.localKey, this.onQuery, this.eager});\n}\n</code></pre>"},{"location":"database/model/relationship/has-one/#_1","title":"HasOne","text":"User ModelUserInfo Model <pre><code>@DoxModel()\nclass User extends UserGenerator {\n    @Column()\n    String? name;\n\n    @HasOne(UserInfo)\n    UserInfo? userInfo;\n}\n</code></pre> <pre><code>@DoxModel()\nclass UserInfo extends UserInfoGenerator {\n    @Column()\n    String? userId;\n\n    @Column()\n    String? address;\n\n    @Column(name: 'house_number')\n    String? houseNumber;\n}\n</code></pre>"},{"location":"database/model/relationship/has-one/#usage","title":"Usage","text":""},{"location":"database/model/relationship/has-one/#getrelation","title":"<code>$getRelation</code>","text":"<pre><code>User? user = await User().find(1);\nawait user?.$getRelation('userInfo')\n\nUserInfo userInfo = user?.userInfo;\n</code></pre> <p>Info</p> <p>When <code>eager</code> is <code>true</code> the <code>$getRelation</code> do not need to call.</p>"},{"location":"database/model/relationship/has-one/#preload","title":"<code>preload</code>","text":"<pre><code>User? user = await User().preload('userInfo').find(1);\nUserInfo userInfo = user?.userInfo;\n</code></pre> <p>Info</p> <p>When <code>eager</code> is <code>true</code> the <code>preload</code> do not need to call.</p>"},{"location":"database/model/relationship/has-one/#related","title":"<code>related</code>","text":"<pre><code>User? user = await User().find(1);\nUserInfo userInfo = await user?.related&lt;UserInfo&gt;('userInfo')?.where('foo', 'bar').getFirst();\n</code></pre>"},{"location":"database/model/relationship/has-one/#options","title":"Options","text":""},{"location":"database/model/relationship/has-one/#model","title":"<code>model</code>","text":"<pre><code>@HasOne(UserInfo)\nUserInfo? userInfo;\n</code></pre>"},{"location":"database/model/relationship/has-one/#foreignkey","title":"<code>foreignKey</code>","text":"<pre><code>@HasOne(UserInfo, foreignKey: 'user_id')\nUserInfo? userInfo;\n</code></pre>"},{"location":"database/model/relationship/has-one/#localkey","title":"<code>localKey</code>","text":"<pre><code>@HasOne(UserInfo, foreignKey: 'user_id', localKey: 'id')\nUserInfo? userInfo;\n</code></pre>"},{"location":"database/model/relationship/has-one/#onquery","title":"<code>onQuery</code>","text":"<pre><code>@DoxModel()\nclass User extends UserGenerator {\n    @HasOne(UserInfo, onQuery: onUserInfoQuery)\n    UserInfo? userInfo;\n\n    static QueryBuilder&lt;UserInfo&gt; onUserInfoQuery(UserInfo q) {\n        return q.where('status', 'active');\n    }\n}\n</code></pre> <p>Info</p> <p><code>onQuery</code> method must be a static method inside the model.</p>"},{"location":"database/model/relationship/has-one/#eager","title":"<code>eager</code>","text":"<pre><code>@HasOne(UserInfo, eager: true)\nUserInfo? userInfo;\n</code></pre>"},{"location":"database/model/relationship/many-to-many/","title":"ManyToMany","text":"<p>A \"many-to-many\" relationship is a powerful concept in database design, often used to represent complex associations between entities. Consider a scenario where we have an <code>Artist</code> model and a <code>Song</code> model. To represent the fact that each artist can have multiple songs, and each song can have multiple artists, we establish a \"many-to-many\" relationship.</p> <p>To achieve this, we typically create an intermediary table, often referred to as a \"pivot\" or \"junction\" table, which contains foreign keys referencing both the <code>Artist</code> and <code>Song</code> models. This table captures the relationships between artists and songs.</p> ManyToMany Class Structure <pre><code>class ManyToMany {\n    final Type model;\n    final Function? onQuery;\n    final bool? eager;\n    final String? localKey;\n    final String? relatedKey;\n    final String? pivotForeignKey;\n    final String? pivotRelatedForeignKey;\n    final String? pivotTable;\n\n    const ManyToMany(\n        this.model, {\n        this.eager,\n        this.onQuery,\n        this.localKey,\n        this.relatedKey,\n        this.pivotForeignKey,\n        this.pivotRelatedForeignKey,\n        this.pivotTable,\n    });\n}\n</code></pre>"},{"location":"database/model/relationship/many-to-many/#_1","title":"ManyToMany","text":"Artist ModelSong ModelPivot table <pre><code>@DoxModel()\nclass Artist extends ArtistGenerator {\n    @column()\n    String name;\n\n    @ManyToMany(Song)\n    List&lt;Song&gt; songs = [];\n}\n</code></pre> <pre><code>@DoxModel()\nclass Song extends SongGenerator {\n    @column()\n    String name;\n\n    @ManyToMany(Artist)\n    List&lt;Artist&gt; artists = [];\n}\n</code></pre> <pre><code>Table Name -&gt; artist_song\n\n----------------------\nColumns\n----------------------\nid               int\nartist_id        int\nsong_id          int\n----------------------\n</code></pre>"},{"location":"database/model/relationship/many-to-many/#usage","title":"Usage","text":""},{"location":"database/model/relationship/many-to-many/#getrelation","title":"<code>$getRelation</code>","text":"ArtistSong <pre><code>Artist? artist = await Artist().find(1);\nawait artist?.$getRelation('songs')\n\nList&lt;Song&gt; songs = artist?.songs;\n</code></pre> <pre><code>Song? song = await Song().find(1);\nawait song?.$getRelation('artists')\n\nList&lt;Artist&gt; artists = song?.artists;\n</code></pre> <p>Info</p> <p>When <code>eager</code> is <code>true</code> the <code>$getRelation</code> do not need to call.</p>"},{"location":"database/model/relationship/many-to-many/#preload","title":"<code>preload</code>","text":"ArtistSong <pre><code>Artist? artist = await Artist().preload('songs').find(1);\nList&lt;Song&gt; songs = artist?.songs;\n</code></pre> <pre><code>Song? song = await Song().preload('artists').find(1);\nList&lt;Artist&gt; artists = song?.artists;\n</code></pre> <p>Info</p> <p>When <code>eager</code> is <code>true</code> the <code>preload</code> do not need to call.</p>"},{"location":"database/model/relationship/many-to-many/#related","title":"<code>related</code>","text":"ArtistSong <pre><code>Artist? artist = await Artist().find(1);\nList&lt;Song&gt; songs = await artist?\n    .related&lt;Song&gt;('songs')\n    .where('status', 'active').get();\n</code></pre> <pre><code>Song? song = await Song().find(1);\nList&lt;Artist&gt; artist = await song?\n    .related&lt;Artist&gt;('artists')\n    .orderBy('name').get();\n</code></pre>"},{"location":"database/model/relationship/many-to-many/#options","title":"Options","text":""},{"location":"database/model/relationship/many-to-many/#model","title":"<code>model</code>","text":"<pre><code>@ManyToMany(Song)\nList&lt;Song&gt; songs;\n</code></pre>"},{"location":"database/model/relationship/many-to-many/#localkey","title":"<code>localKey</code>","text":"<p>Model primary key.</p> Artist ModelSong Model <pre><code>@ManyToMany(Song, localKey: 'id') // primary key of artist table\nList&lt;Song&gt; songs;\n</code></pre> <pre><code>@ManyToMany(Artist, localKey: 'id') // primary key of song table\nList&lt;Artist&gt; artists;\n</code></pre>"},{"location":"database/model/relationship/many-to-many/#relatedkey","title":"<code>relatedKey</code>","text":"<p>Related model primary key.</p> Artist ModelSong Model <pre><code>@ManyToMany(Song, relatedKey: 'id') // primary key of song table\nList&lt;Song&gt; songs;\n</code></pre> <pre><code>@ManyToMany(Artist, relatedKey: 'id') // primary key of artist table\nList&lt;Artist&gt; artists;\n</code></pre>"},{"location":"database/model/relationship/many-to-many/#pivotforeignkey","title":"<code>pivotForeignKey</code>","text":"Artist ModelSong Model <pre><code>@ManyToMany(Song, pivotForeignKey: 'artist_id')\nList&lt;Song&gt; songs;\n</code></pre> <pre><code>@ManyToMany(Artist, pivotForeignKey: 'song_id')\nList&lt;Artist&gt; artists;\n</code></pre> <p>Info</p> <p>If model is Artist, <code>artist_id</code> from pivot table. If model is Song, <code>song_id</code> from pivot table.</p>"},{"location":"database/model/relationship/many-to-many/#pivotrelatedforeignkey","title":"<code>pivotRelatedForeignKey</code>","text":"Artist ModelSong Model <pre><code>@ManyToMany(Song, pivotRelatedForeignKey: 'song_id')\nList&lt;Song&gt; songs;\n</code></pre> <pre><code>@ManyToMany(Artist, pivotRelatedForeignKey: 'artist_id')\nList&lt;Artist&gt; artists;\n</code></pre> <p>Info</p> <p>If model is artist, song_id from pivot table. If model is song, artist_id from pivot table.</p>"},{"location":"database/model/relationship/many-to-many/#pivottable","title":"<code>pivotTable</code>","text":"<pre><code>@ManyToMany(Song, pivotTable: 'artist_song')\nList&lt;Song&gt; songs;\n</code></pre> <p>Info</p> <p>By default, the pivot table will be named alphabetically, as demonstrated by these examples:</p> <ol> <li>For tables named <code>song</code> and <code>artist</code>, the pivot table would be named <code>artist_song</code>.</li> <li>In the case of tables named <code>blog</code> and <code>category</code>, the default pivot table name would be <code>blog_category</code>.</li> </ol> <p>However, you have the flexibility to provide a custom name to the <code>pivotTable</code> parameter if needed.</p>"},{"location":"database/model/relationship/many-to-many/#onquery","title":"<code>onQuery</code>","text":"Artist ModelSong Model <pre><code>@ManyToMany(Song, onQuery: onQueryActiveCategory)\nList&lt;Song&gt; songs;\n\nstatic QueryBuilder&lt;Category&gt; onQueryActiveCategory(Category q) {\n    return q.where('status', 'active');\n}\n</code></pre> <pre><code>@ManyToMany(Artist, onQuery: onQueryActiveArtist)\nList&lt;Artist&gt; artists;\n\nstatic QueryBuilder&lt;Artist&gt; onQueryActiveArtist(Artist q) {\n    return q.where('status', 'active');\n}\n</code></pre> <p>Info</p> <p><code>onQuery</code> method must be a static method inside the model.</p>"},{"location":"database/model/relationship/many-to-many/#eager","title":"<code>eager</code>","text":"Artist ModelSong Model <pre><code>@ManyToMany(Song, eager: true)\nList&lt;Song&gt; songs;\n</code></pre> <pre><code>@ManyToMany(Artist, eager: true)\nList&lt;Artist&gt; artists;\n</code></pre>"},{"location":"digging-deeper/cache/","title":"Cache","text":"<p>Your application may involve data retrieval or processing tasks that are computationally intensive or time-consuming, potentially taking several seconds to finish. In such situations, it's a common practice to temporarily store the obtained data in a cache, enabling swift retrieval for subsequent requests requiring the same information. Typically, this cached data is stored in high-speed data stores like Memcached or Redis.</p> <p>Thankfully, Dox offers a versatile and consistent API for various cache backends, empowering you to harness their rapid data retrieval capabilities and enhance the performance of your web application.</p>"},{"location":"digging-deeper/cache/#usage","title":"Usage","text":""},{"location":"digging-deeper/cache/#put","title":"<code>put</code>","text":"<pre><code>// Default duration is 1 hour\n\nawait Cache().put('foo', 'bar');\n</code></pre> <pre><code>// With custom duration\n\nawait Cache().put('delay', 'Dox', duration: Duration(microseconds: 1));\n</code></pre>"},{"location":"digging-deeper/cache/#forever","title":"<code>forever</code>","text":"<pre><code>// Store data in cache forever.\n\nawait Cache().forever('foo', 'bar');\n</code></pre>"},{"location":"digging-deeper/cache/#get","title":"<code>get</code>","text":"<pre><code>// Get stored cache with cache key.\n\nawait Cache().get('foo');\n</code></pre>"},{"location":"digging-deeper/cache/#has","title":"<code>has</code>","text":"<pre><code>// Check key exist in cache\n\nawait Cache().has('foo'); // this will return boolean\n</code></pre>"},{"location":"digging-deeper/cache/#forget","title":"<code>forget</code>","text":"<pre><code>// Delete a cache with cache key\n\nawait Cache().forget('foo');\n</code></pre>"},{"location":"digging-deeper/cache/#tag","title":"<code>tag</code>","text":"<pre><code>// Set a tag to store cache\n\nawait Cache().tag('folder').put('foo', 'bar');\nawait Cache().tag('folder').get('foo');\nawait Cache().tag('folder').flush();\n</code></pre> <p>Info</p> <p>tag is like a folder name to store cache.</p>"},{"location":"digging-deeper/cache/#flush","title":"<code>flush</code>","text":"<pre><code>// Delete all the cache keys\n\nawait Cache().flush();\n</code></pre>"},{"location":"digging-deeper/cache/#store","title":"<code>store</code>","text":"<pre><code>// Set driver name\n\nawait Cache().store('redis').put('foo', 'bar');\nawait Cache().store('file').put('foo', 'bar');\n</code></pre> <p>Info</p> <p>If you have multiple drivers, you can use <code>store()</code> method to set the driver name. By default it will be <code>file</code> driver.</p>"},{"location":"digging-deeper/deployment/","title":"Deployment","text":""},{"location":"digging-deeper/deployment/#build","title":"Build","text":"<p>Compile dart into machine code.</p> <pre><code>dox build\n</code></pre> <p>Start the application.</p> <pre><code>bin/server\n</code></pre>"},{"location":"digging-deeper/deployment/#nginx-configuration","title":"Nginx Configuration","text":"<p>Running server with Nginx reverse proxy.</p> <pre><code>server {\n  listen 80;\n\n  server_name &lt;YOUR_APP_DOMAIN.COM&gt;;\n\n  location / {\n    proxy_pass http://localhost:&lt;APP_PORT&gt;;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_cache_bypass $http_upgrade;\n  }\n}\n</code></pre>"},{"location":"digging-deeper/dox-cli/","title":"Dox CLI","text":"<p>Dox has a CLI tool to generate migration, model and to handle database migration which support up and down methods to control migration version.</p>"},{"location":"digging-deeper/dox-cli/#installation","title":"Installation","text":"<pre><code>dart pub global activate dox\n</code></pre> <p>Export bin path</p> <p>Please make sure you have included <code>bin</code> path to your profile. If you did not added path to your profile yet, open <code>~/.bashrc</code> or <code>~/.zshrc</code> and paste below line.</p> <pre><code>export PATH=\"$PATH\":\"~/.pub-cache/bin\"\n</code></pre> <p>Tips</p> <p>You can also use <code>bin/dox {command}</code> from your project folder to run server or create migration etc..</p>"},{"location":"digging-deeper/dox-cli/#update-package","title":"Update package","text":"<pre><code>dox update\n</code></pre>"},{"location":"digging-deeper/dox-cli/#crete-new-project","title":"Crete new project","text":"<pre><code>dox create new_blog\n</code></pre>"},{"location":"digging-deeper/dox-cli/#serve-project","title":"Serve project","text":"<p>Run http server.</p> <pre><code>dox serve \nor \ndox s\n\ndox s --ignore-build-runner // ignore build runner watch\n</code></pre>"},{"location":"digging-deeper/dox-cli/#run-build-runner","title":"Run build runner","text":"<pre><code>dox build_runner:watch\ndox build_runner:build\n</code></pre>"},{"location":"digging-deeper/dox-cli/#build-project-for-production","title":"Build project for production","text":"<pre><code>dox build (compile into machine code)\nbin/server (run exec file to serve http server)\n</code></pre>"},{"location":"digging-deeper/dox-cli/#generate-app-key","title":"Generate app key","text":"<pre><code>dox key:generate\n</code></pre>"},{"location":"digging-deeper/dox-cli/#create-controller","title":"Create controller","text":"DefaultResource controllerWebsocket controller <pre><code>dox create:controller admin_controller\n</code></pre> <pre><code>dox create:controller admin_controller -r\n</code></pre> <pre><code>dox create:controller admin_controller -ws\n</code></pre>"},{"location":"digging-deeper/dox-cli/#create-middleware","title":"Create middleware","text":"<pre><code>dox create:middleware auth_middleware\n</code></pre>"},{"location":"digging-deeper/dox-cli/#create-migration","title":"Create migration","text":"<pre><code>dox create:migration create_foo_table\n</code></pre>"},{"location":"digging-deeper/dox-cli/#create-model","title":"Create model","text":"DefaultWith migration <pre><code>dox create:model ModelName\n</code></pre> <pre><code>dox create:model ModelName -m\n</code></pre>"},{"location":"digging-deeper/dox-cli/#run-migration","title":"Run migration","text":"<pre><code>dox migrate\n</code></pre> <p>Info</p> <p>To run migration, make sure that you have create <code>.env</code> file with with below variable names.</p> <pre><code>DB_HOST=localhost\nDB_PORT=5432\nDB_NAME=postgres\nDB_USERNAME=admin\nDB_PASSWORD=password\n</code></pre>"},{"location":"digging-deeper/dox-cli/#rollback-migration","title":"Rollback migration","text":"<pre><code>dox migrate:rollback\n</code></pre>"},{"location":"digging-deeper/dox-cli/#deactivate-cli","title":"Deactivate CLI","text":"<pre><code>dart pub global deactivate dox\n</code></pre>"},{"location":"digging-deeper/env/","title":"Environment Variables","text":"<p>Dox allows you to access the environment variables from <code>.env</code> using <code>Env</code> class.</p> Example <pre><code>Env.get('APP_KEY');\n\n// With default values\nEnv.get('APP_KEY', 'default_value');\n</code></pre>"},{"location":"digging-deeper/env/#with-type","title":"With type","text":"IntString <pre><code>Env.get&lt;int&gt;('APP_PORT', 3000)\n</code></pre> <pre><code>Env.get&lt;String&gt;('APP_KEY')\n</code></pre>"},{"location":"digging-deeper/file-storage/","title":"File Storage","text":"<p>Dox file storage offers straightforward drivers for managing local file systems and extends the capability to develop custom drivers for cloud services like AWS or Digital Ocean Spaces.</p> <pre><code>Route.post('/image/put', (DoxRequest req) async {\n    /// get form-data image from request\n    RequestFile file = req.input('image');\n\n    /// store image to /storage/images folder\n    String url = await Storage().put('images', await file.bytes);\n\n    return url;\n});\n</code></pre>"},{"location":"digging-deeper/file-storage/#functions","title":"Functions","text":""},{"location":"digging-deeper/file-storage/#putrequestfile","title":"<code>putRequestFile</code>","text":"<p>This function takes an instance of the RequestFile class as input and manages the storage of files. It is intended for handling files in a more structured manner, allowing you to work with file metadata, such as file name, content type, and other attributes, along with the file's binary data. This function is suitable for handling file uploads and storage in your application.</p> <pre><code>RequestFile file = req.input('image');\n\nString url = await Storage().putRequestFile('images', file);\n</code></pre>"},{"location":"digging-deeper/file-storage/#put","title":"<code>put</code>","text":"<p>This function accepts a byte sequence as input and stores it. It is designed for saving raw binary data, such as images or binary files, directly to a storage.</p> <pre><code>RequestFile file = req.input('image');\n\nString url = await Storage().put('images', file.bytes);\n</code></pre>"},{"location":"digging-deeper/file-storage/#get","title":"<code>get</code>","text":"<p>Retrieve the file in the form of a byte string.</p> <pre><code>List&lt;int&gt;? bytes = Storage().get('images/avatar/sample.jpeg');\n</code></pre>"},{"location":"digging-deeper/file-storage/#exists","title":"<code>exists</code>","text":"<p>Verify the file's existence.</p> <pre><code>List&lt;int&gt;? bytes = Storage().exists('images/avatar/sample.jpeg');\n</code></pre>"},{"location":"digging-deeper/file-storage/#delete","title":"<code>delete</code>","text":"<p>This function removes or erases the file.</p> <pre><code>List&lt;int&gt;? bytes = Storage().delete('images/avatar/sample.jpeg');\n</code></pre>"},{"location":"digging-deeper/file-storage/#stream","title":"<code>stream</code>","text":"<p>This function provides the file in a format that can be streamed.</p> <pre><code>StreamFile file = Storage().stream('images/avatar/sample.jpeg');\n</code></pre>"},{"location":"digging-deeper/file-storage/#download","title":"<code>download</code>","text":"<p>This function provides the file in a format that can be downloaded.</p> <pre><code>DownloadableFile file = Storage().download('images/avatar/sample.jpeg');\n</code></pre>"},{"location":"digging-deeper/file-storage/#custom-file-driver","title":"Custom file driver","text":"<p>To create a custom driver, you have the option to implement the <code>StorageDriverInterface</code>.</p> <pre><code>class YourCustomDriver implements StorageDriverInterface {\n\n    @override\n    Future&lt;bool&gt; exists(String filename) {\n\n    }\n\n    @override\n    Future&lt;Uint8List?&gt; get(String filename) async {\n\n    }\n\n    @override\n    Future&lt;dynamic&gt; delete(String filename) async {\n\n    }\n\n    @override\n    Future&lt;String&gt; put(String folder, List&lt;int&gt; bytes, { String? extension }) async {\n\n    }\n}\n</code></pre>"},{"location":"digging-deeper/isolate/","title":"Isolate","text":"<p>Dox support multi-threaded HTTP server using isolates that can handle 10x concurrency requests with high speed.</p> <p>By default, Dox runs on three isolates. You can configure this setting in the <code>lib/config/app.dart</code> file. Or simply add like <code>APP_TOTAL_ISOLATE=6</code> in environment variable.</p> <pre><code>totalIsolate: Env.get&lt;int&gt;('APP_TOTAL_ISOLATE', 6),\n</code></pre>"},{"location":"digging-deeper/services/","title":"Services","text":"<p>If your application requires additional services like a database, auth etc.., you'll need to create a class that implements the <code>DoxService</code> interface and then register it with Dox. Since Dox operates with isolates (multi-threading), these extra services must be passed to each isolate to ensure their availability on all isolates.</p>"},{"location":"digging-deeper/services/#example-with-auth","title":"Example with auth","text":"AuthService <pre><code>class AuthService implements DoxService {\n    @override\n    void setup() {\n        Auth.initialize(AuthConfig(\n        /// default auth guard\n        defaultGuard: 'web',\n\n        /// list of auth guards\n        guards: &lt;String, AuthGuard&gt;{\n            'web': AuthGuard(\n            driver: JwtAuthDriver(secret: SecretKey(Env.get('APP_KEY'))),\n            provider: AuthProvider(\n                model: () =&gt; User(),\n            ),\n            ),\n        },\n        ));\n    }\n}\n</code></pre>"},{"location":"digging-deeper/services/#_1","title":"Services","text":"Register into dox <code>app/config/services.dart</code> <pre><code>List&lt;DoxService&gt; services = &lt;DoxService&gt;[\n  ... /// other services\n  AuthService,\n];\n</code></pre>"},{"location":"digging-deeper/testing/","title":"Testing","text":""},{"location":"digging-deeper/testing/#integration-test","title":"Integration test","text":"<pre><code>import 'package:dox_app/config/app.dart';\nimport 'package:dox_core/dox_core.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:test/test.dart';\n\nString baseUrl = 'http://localhost:${config.serverPort}';\n\nvoid main() {\n    setUpAll(() async {\n        Dox().initialize(appConfig);\n        await Dox().startServer();\n\n        // for for few seconds to fully started http server\n        await Future&lt;dynamic&gt;.delayed(Duration(milliseconds: 500));\n    });\n\n    test('/api/ping route', () async {\n        var url = Uri.parse('$baseUrl/api/ping');\n        var response = await http.get(url);\n        expect(response.statusCode, 200);\n        expect(response.body, 'pong');\n    });\n}\n</code></pre>"},{"location":"digging-deeper/websocket/","title":"WebSocket","text":"<p>WebSocket is a communication protocol that enables real-time, full-duplex, bidirectional data exchange between a client and a server over a single, long-lived connection. It is commonly used in web applications to facilitate interactive features like live chat, online gaming, and real-time updates, as it allows for efficient and low-latency data transfer without the overhead of constantly opening and closing connections. WebSocket is especially well-suited for scenarios where instant communication and data synchronization between client and server are crucial.</p>"},{"location":"digging-deeper/websocket/#usage","title":"Usage","text":""},{"location":"digging-deeper/websocket/#1-create-websocket-service-with-redis-adapter","title":"1. Create websocket service with redis adapter","text":"<pre><code>class WebsocketService implements DoxService {\n  @override\n  void setup() {\n    Redis sub = Redis();\n    Redis pub = sub.duplicate();\n\n    WebsocketServer io = WebsocketServer(Dox());\n    io.adapter(WebsocketRedisAdapter(\n      subscriber: sub,\n      publisher: pub,\n    ));\n  }\n}\n</code></pre> <p>Info</p> <p>While running with multiple isolate(multithread), the Dox WebSocket require Redis adapter which require <code>ioredis</code> package to function. Currently, Dox WebSocket only supports the Redis adapter. And if you do not want to use any adapter, please set total isolate value to <code>1</code> in <code>lib/config/app.dart</code> to function properly.</p>"},{"location":"digging-deeper/websocket/#2-register-websocket-service-to-dox-appconfigservicesdart","title":"2. Register websocket service to dox <code>app/config/services.dart</code>","text":"<pre><code>List&lt;DoxService&gt; services = &lt;DoxService&gt;[\n  ... /// other services\n  WebsocketService,\n];\n</code></pre>"},{"location":"digging-deeper/websocket/#3-create-websocket-controller","title":"3. Create websocket controller","text":"<pre><code>dox create:controller SocketController -ws\n</code></pre> <pre><code>import 'package:dox_core/dox_core.dart';\nimport 'package:dox_websocket/dox_websocket.dart';\n\nclass ChatWebSocketController {\n  intro(WebsocketEmitter emitter, dynamic message) {\n    // sent message to chart room but exclude the sender\n    emitter.room('chat').emitExceptSender('intro', message);\n  }\n\n  noti(WebsocketEmitter emitter, dynamic message) {\n    // sent message to chart room including the sender\n    emitter.room('chat').emit('noti', message);\n  }\n}\n</code></pre> <p>Note</p> <p>As webSocket maintains an open connection, there is no requirement to send back any values from your controller method.</p>"},{"location":"digging-deeper/websocket/#4-register-websocket-route-and-events","title":"4. register websocket route and events","text":"<pre><code>ChatWebSocketController controller = ChatWebSocketController();\n\nRouter.websocket('ws', (WebsocketEvent event) {\n    // when client sent an event called `intro`, \n    // it will execute `controller.intro` method\n    event.on('intro', controller.intro);\n\n    // when client sent an event called `noti`, \n    // it will execute `controller.noti` method\n    event.on('noti', controller.noti);\n});\n</code></pre> <p>Info</p> <p>You can register websocket routes on <code>lib/routes/web.dart</code> or you can also create custom websocket router and register in <code>lib/config/app.dart</code>. Both option will create a websocket url on <code>ws://127.0.0.1:{port}/ws</code>.</p> <p>Note</p> <p>You also have the option to register WebSocket routes for multiple paths, rather than just the default <code>/ws</code> route.</p>"},{"location":"digging-deeper/websocket/#client-usage","title":"Client Usage","text":"<p>You have the option to utilize either the built-in browser WebSocket or any WebSocket library for clients. The key requirement is that when sending data, it must be in the form of a JSON string containing both <code>event</code> and <code>message</code> attributes. Refer to the example below for clarification.</p>"},{"location":"digging-deeper/websocket/#example-with-dart","title":"Example with Dart","text":"<pre><code>import 'dart:io';\n\n// The event name that is listening in your routes\n// Eg. DoxWebsocket.on('intro', controller.intro);\nString event = 'intro';\n\n// Message can be any type such as int, float, map, string etc..\nString message = \"Mingalaba!\"; \n\n\n// Encoding to json formatted string\nvar data = jsonEncode({\n    \"event\": event,\n    \"message\": message,\n});\n\nString url = 'ws://localhost:3000/ws';\nWebSocket socket = await WebSocket.connect(url);\n\nsocket.add(data);\n\n\n// If you would like to join the room, please use event name `joinRoom`\nvar joinRoomData = jsonEncode({\n    \"event\": \"joinRoom\",\n    \"message\": \"chat\", // sent room name as message\n});\n\n// Sent message to join the chat room\nsocket.add(joinRoomData);\n</code></pre>"},{"location":"digging-deeper/websocket/#example-with-javascript","title":"Example with javascript","text":"<p>For Handling with javascript, we suggested you to use below library. https://github.com/dartondox/dox-web-socket-client</p> <pre><code>import DoxWebsocket from '@dartondox/websocket';\n\nconst socket = DoxWebsocket('ws://127.0.0.1:3000/ws', {\n  maxRetries: 18, retryAfter: 2000 \n})\n\nsocket.onConnected(() =&gt; {\n  console.log(socket.id)\n})\n\nsocket.onError(() =&gt; {\n  console.log('socket error')\n})\n\n// Listen in client for intro event that will sent from the server\nsocket.on('intro', (msg) =&gt; {\n  console.log(msg)\n})\n\nsocket.onClose(() =&gt; {\n  console.log('socket closed')\n})\n\nfunction sendMessage(message) {\n  socket.emit('intro', message)\n}\n</code></pre>"},{"location":"digging-deeper/websocket/#socketemitter","title":"SocketEmitter","text":""},{"location":"digging-deeper/websocket/#room","title":"<code>room</code>","text":"<p>Set the room before emit to client</p> <pre><code>emitter.room('chat').emit('event-name', message);\n</code></pre>"},{"location":"digging-deeper/websocket/#emit","title":"<code>emit</code>","text":"<p>Emit to all the client connected to the same websocket route.</p> <pre><code>emitter.emit('event-name', message);\n</code></pre>"},{"location":"digging-deeper/websocket/#emitexceptsender","title":"<code>emitExceptSender</code>","text":"<p>Emit to all the client connected to the same websocket route except the sender.</p> <pre><code>emitter.emitExceptSender('event-name', message);\n</code></pre>"},{"location":"others/contribute/","title":"Contribute","text":"<p>Want to contribute? Great! Fork the repo and create PR to us.</p>"},{"location":"others/contribute/#setting-up-local-development","title":"Setting up local development","text":""},{"location":"others/contribute/#1-clone-repo","title":"1. Clone repo","text":"<pre><code>git clone git@github.com:dartondox/dox.git\n</code></pre>"},{"location":"others/contribute/#2-install-melos-if-not-installed","title":"2. Install melos if not installed","text":"<pre><code>dart pub global activate melos\n</code></pre>"},{"location":"others/contribute/#3-run-melos-bootstrap","title":"3. Run melos bootstrap","text":"<pre><code>melos bs\n</code></pre>"},{"location":"others/releases/core-release/","title":"Core","text":""},{"location":"others/releases/core-release/#v200-alpha2","title":"v2.0.0-alpha.2","text":"<ul> <li>Extract websocket as separate package <code>dox-websocket</code></li> <li>Type improvement on usage of auth package</li> <li>Bug fix on multithread with services</li> </ul>"},{"location":"others/releases/core-release/#v200-alpha1","title":"v2.0.0-alpha.1","text":"<ul> <li>Support storage class for file storage</li> <li>Add more unit/integration test coverage</li> <li>Fix bug for websocket running on multiple isolates</li> <li>Update cache config setting on app config</li> </ul>"},{"location":"others/releases/core-release/#v200-alpha0","title":"v2.0.0-alpha.0","text":"<ul> <li>Added support for multi-thread http server which is 10x faster on concurrency request</li> <li>Added support for services (i.e database, redis) to run on each isolate/multi-thread</li> <li>Added cache class that run file driver as default </li> <li>Added support for custom cache drivers, i.e redis, memcached</li> <li>Added <code>JSON.stringify()</code> and <code>JSON.parse()</code> that support DateTime to encode</li> <li>Added support for DateTime object on http response/return data</li> <li>Added support of size and bytes information on uploaded <code>RequestFile</code></li> <li>Bug fixed on multipart form data file store</li> <li>Removed database config option in app config.</li> <li>Moved ioc container from <code>Global.ioc</code> to <code>Dox().ioc</code></li> <li>Improvement on routes</li> <li>Rename Handler interface to ResponseHandlerInterface</li> </ul>"},{"location":"others/releases/core-release/#v106","title":"v1.0.6","text":"<ul> <li>Remove third party dot env package and replace with own <code>Env</code> class</li> </ul>"},{"location":"others/releases/core-release/#v105","title":"v1.0.5","text":"<ul> <li>Modify request auth getter to function to support type injection</li> </ul>"},{"location":"others/releases/core-release/#v104","title":"v1.0.4","text":"<ul> <li>Added interfaces/classes for authentication</li> <li>Bug fixed on router prefix</li> <li>Bug fixed on cookie return type <code>String?</code></li> </ul>"},{"location":"others/releases/core-release/#v103","title":"v1.0.3","text":"<ul> <li>Ignore error on missing method of resource route</li> <li>Added single quote rule in linter</li> </ul>"},{"location":"others/releases/core-release/#v102","title":"v1.0.2","text":"<ul> <li>Bug fixed method not found on resource route</li> </ul>"},{"location":"others/releases/core-release/#v101","title":"v1.0.1","text":"<ul> <li>Added missing types on functions and arguments</li> <li>Added linter rules</li> </ul>"},{"location":"others/releases/core-release/#v100","title":"v1.0.0","text":"<ul> <li>First stable release</li> </ul>"},{"location":"others/releases/core-release/#v100-alpha2","title":"v1.0.0-alpha.2","text":"<ul> <li>Support domain routing</li> <li>Improvement group routing</li> <li>Support middleware routing</li> <li>Added app level middleware support </li> <li>Added function's self documentation</li> <li>Websocket improvement and support multiple path</li> <li>Support serializer</li> </ul>"},{"location":"others/releases/core-release/#v100-alpha1","title":"v1.0.0-alpha.1","text":"<ul> <li>Added support for validation</li> <li>Added support for form data for file uploading</li> <li>Improve error handling</li> </ul>"},{"location":"others/releases/core-release/#v100-alpha0","title":"v1.0.0-alpha.0","text":"<ul> <li>Refactor the code</li> <li>Added test cases</li> <li>Added support for global middleware</li> <li>Added support to throw error exception in response and add support to handle via response handler</li> <li>Rename BaseHttpException to HttpException</li> <li>Bug fixed on cookie response</li> </ul>"},{"location":"others/releases/core-release/#v0017","title":"v0.0.17","text":"<ul> <li>Separate Query builder from core</li> </ul>"},{"location":"others/releases/core-release/#v0016","title":"v0.0.16","text":"<ul> <li>Replace with dox query builder</li> <li>Added feature to auto encode List response <li>Added resource routes</li> <li>Added <code>req.input()</code> in DoxRequest</li> <li>Added support CORS</li> <li>Added More Response options on DoxResponse</li> <li>Added <code>Hash.make('password')</code> for password encryption</li> <li>Added Support websocket</li>"},{"location":"others/releases/query-builder-release/","title":"Query builder","text":""},{"location":"others/releases/query-builder-release/#v1115","title":"v1.1.15","text":"<ul> <li>Bug fixed on toMap</li> </ul>"},{"location":"others/releases/query-builder-release/#v1114","title":"v1.1.14","text":"<ul> <li>Bug fixed on eager/preload data missing in <code>toMap</code> response.</li> <li>Bug fixed on <code>deleted_at</code> column conflict.</li> <li>Support for <code>withTrash</code> chain on any query builder function.</li> </ul>"},{"location":"others/releases/query-builder-release/#v1113","title":"v1.1.13","text":"<ul> <li>Update readme</li> <li>bug fixed on count() with order by</li> </ul>"},{"location":"others/releases/query-builder-release/#v1112","title":"v1.1.12","text":"<ul> <li>Add support for paginate() function</li> <li>Add support for query printer, file printer, consoler printer and pretty printer.</li> </ul>"},{"location":"others/releases/query-builder-release/#v1111","title":"v1.1.11","text":"<ul> <li>Add missing types on function and arguments</li> <li>Bug fixed on count, custom query</li> </ul>"},{"location":"others/releases/query-builder-release/#v1110","title":"v1.1.10","text":"<ul> <li>Remove hidden fields on toJson</li> </ul>"},{"location":"others/releases/query-builder-release/#v119","title":"v1.1.9","text":"<ul> <li>Bug fixed on jsonEncode(Model)</li> </ul>"},{"location":"others/releases/query-builder-release/#v118","title":"v1.1.8","text":"<ul> <li>Update readme</li> </ul>"},{"location":"others/releases/query-builder-release/#v117","title":"v1.1.7","text":"<ul> <li>Add option in <code>toMap()</code> to remove hidden fields</li> </ul>"},{"location":"others/releases/query-builder-release/#v116","title":"v1.1.6","text":"<ul> <li>Create own annotation and builder</li> <li>Added belongsTo support</li> <li>Added hasOne support</li> <li>Added hasMany support</li> <li>Added manyToMany support</li> <li>Added eager loading support</li> </ul>"},{"location":"others/releases/query-builder-release/#v1011","title":"v1.0.11","text":"<ul> <li>Bug fixed id null on save</li> </ul>"},{"location":"others/releases/query-builder-release/#v1010","title":"v1.0.10","text":"<ul> <li>Bug fixed on debug option in model</li> <li>Bug fixed on debug query param missing</li> <li>Support Postgres Pool</li> <li>Support hidden fields in model</li> </ul>"},{"location":"others/releases/query-builder-release/#v101","title":"v1.0.1","text":"<ul> <li>Update documentation</li> </ul>"},{"location":"others/releases/query-builder-release/#v100","title":"v1.0.0","text":"<ul> <li>Initial release</li> </ul>"},{"location":"security/authentication/","title":"Authentication","text":""},{"location":"security/authentication/#installation","title":"Installation","text":"YAMLCLI <pre><code>dependencies:\n...\ndox_auth: &lt;latest&gt;\n</code></pre> <pre><code>dart pub add dox_auth\n</code></pre> <p>Package link : https://pub.dev/packages/dox_auth</p>"},{"location":"security/authentication/#usage","title":"Usage","text":""},{"location":"security/authentication/#1-setup-auth-service","title":"1. Setup auth service","text":"<p>Create auth service file <code>lib/services/auth_service.dart</code>.</p> <pre><code>class AuthService implements DoxService {\n  @override\n  void setup() {\n    Auth.initialize(AuthConfig(\n      /// default auth guard\n      defaultGuard: 'web',\n\n      /// list of auth guards\n      guards: &lt;String, AuthGuard&gt;{\n        'web': AuthGuard(\n          driver: JwtAuthDriver(secret: SecretKey(Env.get('APP_KEY'))),\n          provider: AuthProvider(\n            model: () =&gt; User(),\n          ),\n        ),\n      },\n    ));\n  }\n}\n</code></pre>"},{"location":"security/authentication/#2-register-into-dox-appconfigservicesdart","title":"2. Register into dox <code>app/config/services.dart</code>","text":"<pre><code>List&lt;DoxService&gt; services = &lt;DoxService&gt;[\n  ... /// other services\n  AuthService,\n];\n</code></pre>"},{"location":"security/authentication/#3-register-auth-middleware","title":"3. Register auth middleware","text":"<p>Register <code>AuthMiddleware()</code> in route.</p> <pre><code>Route.get('/auth/user', &lt;dynamic&gt;[\n  AuthMiddleware(), \n  authController.user\n]);\n</code></pre>"},{"location":"security/authentication/#4-attempt-login","title":"4. Attempt Login","text":"<p>Use auth package in controller to attempt login.</p> <pre><code>class AuthController {\n    login() {\n        Map&lt;String, dynamic&gt; credentials = req.only(&lt;String&gt;['email', 'password']);\n        Auth auth = Auth();\n        String? token = await auth.attempt(credentials);\n        if(token != null) {\n            User? user = auth.user&lt;User&gt;();\n            return user;\n        }\n        return response(\"unauthorized\").statusCode(401);\n    }\n}\n</code></pre>"},{"location":"security/authentication/#5-verify-or-fetch-user","title":"5. Verify or Fetch User","text":"<p>Verify logged in user or fetch user information.</p> <pre><code>Future&lt;dynamic&gt; fetchUser(DoxRequest req) async {\n  IAuth? auth = req.auth;\n  if (auth?.isLoggedIn() == true) {\n    return auth?.user();\n  }\n  throw UnAuthorizedException();\n}\n</code></pre>"},{"location":"security/cors/","title":"CORS","text":"<p>CORS, or Cross-Origin Resource Sharing, is a security feature implemented in web browsers to control and regulate requests made between web pages from different origins (domains). It ensures that web applications running at one domain are allowed or restricted from making requests to resources (such as data or services) hosted on a different domain. CORS helps prevent potentially harmful cross-site request forgery (CSRF) and cross-site scripting (XSS) attacks while enabling safe data sharing and interaction between web applications on separate domains when configured appropriately.</p> <p>CORS configuration can be found in <code>lib/config/cors.dart</code></p> cors.dart <pre><code>CORSConfig cors = CORSConfig(\n    /// Enabled\n    /// -------------------------------\n    /// A boolean to enable or disable CORS integration.\n    /// Setting to true will enable the CORS for all HTTP request.\n    enabled: true,\n\n    /// Origin\n    /// -------------------------------\n    /// Set a list of origins to be allowed for `Access-Control-Allow-Origin`.\n    /// The value can be one of the following:\n    /// Array       : An array of allowed origins.\n    /// String      : Comma separated list of allowed origins.\n    /// String (*)  : A wildcard (*) to allow all request origins.\n    origin: '*',\n\n    /// Methods\n    /// -------------------------------\n    /// Set a list of origins to be allowed for `Access-Control-Request-Method`.\n    /// The value can be one of the following:\n    /// Array       : An array of request methods.\n    /// String      : Comma separated list of request methods.\n    /// String (*)  : A wildcard (*) to allow all request methods.\n    methods: '*',\n\n    /// Headers\n    /// -------------------------------\n    /// Set a list of origins to be allowed for `Access-Control-Allow-Headers`.\n    /// The value can be one of the following:\n    /// Array       : An array of allowed headers.\n    /// String      : Comma separated list of allowed headers.\n    /// String (*)  : A wildcard (*) to allow all request headers.\n    headers: '*',\n\n    /// Expose Headers\n    /// -------------------------------\n    /// Set a list of origins to be allowed for `Access-Control-Expose-Headers`.\n    /// The value can be one of the following:\n    /// Array       : An array of expose headers.\n    /// String      : Comma separated list of expose headers.\n    exposeHeaders: &lt;String&gt;[\n        'cache-control',\n        'content-language',\n        'content-type',\n        'expires',\n        'last-modified',\n        'pragma',\n    ],\n\n    /// Credentials\n    /// -------------------------------\n    /// Toggle `Access-Control-Allow-Credentials` header.\n    credentials: true,\n\n    /// MaxAge\n    /// -------------------------------\n    /// Define `Access-Control-Max-Age` header in seconds.\n    maxAge: 90,\n);\n</code></pre>"},{"location":"security/encryption/","title":"Encryption","text":""},{"location":"security/encryption/#encode","title":"Encode","text":"<pre><code>String encodedMessage = AESEncryptor.encode('Hello world', 'your-secret');\nprint(encodedMessage);\n</code></pre>"},{"location":"security/encryption/#decode","title":"Decode","text":"<pre><code>String decodedMessage = AESEncryptor.decode(encodedMessage, 'your-secret');\nprint(decodedMessage);\n</code></pre>"},{"location":"security/hashing/","title":"Hashing","text":"<p>The Dox Hash class provides the capability to utilize bcrypt for hashing values.</p>"},{"location":"security/hashing/#hash-a-password","title":"Hash a password","text":"<pre><code>String secret = 'password';\nString hashedPassword = Hash.make(secret);\n</code></pre>"},{"location":"security/hashing/#verify-hashed-password","title":"Verify hashed password","text":"<pre><code>String secret = 'password';\nbool verified = Hash.verify(secret, hashedPassword);\n</code></pre>"},{"location":"the-basic/controller/","title":"Controller","text":""},{"location":"the-basic/controller/#class-based-controller","title":"Class based controller","text":"<pre><code>dox create:controller Blog\n</code></pre> RouteController <pre><code>AppController controller = AppController()\nRoute.get('/ping', controller.ping);\n</code></pre> <pre><code>class AppController {\n    ping(DoxRequest req) {\n        return 'pong';\n    }\n}\n</code></pre> <p>with static method</p> <p>You can also use as static method in the controller.</p> RouteController <pre><code>Route.get('/ping', AppController.ping);\n</code></pre> <pre><code>class AppController {\n    static ping(DoxRequest req) {\n        return 'pong';\n    }\n}\n</code></pre>"},{"location":"the-basic/controller/#function-based-controller","title":"Function based controller","text":"RouteController <pre><code>Route.get('/ping', listBlog);\n</code></pre> <pre><code>listBlog(DoxRequest req) {\n    return 'pong';\n}\n</code></pre>"},{"location":"the-basic/controller/#resource-controller","title":"Resource controller","text":"Create <pre><code>dox create:controller Blog -r\n</code></pre>"},{"location":"the-basic/controller/#_1","title":"Controller","text":"Sample <pre><code>import 'package:dox_core/dox_core.dart';\n\nclass BlogController {\n    /// GET /resource\n    index(DoxRequest req) async {}\n\n    /// GET /resource/create\n    create(DoxRequest req) async {}\n\n    /// POST /resource\n    store(DoxRequest req) async {}\n\n    /// GET /resource/{id}\n    show(DoxRequest req, String id) async {}\n\n    /// GET /resource/{id}/edit\n    edit(DoxRequest req, String id) async {}\n\n    /// PUT|PATCH /resource/{id}\n    update(DoxRequest req, String id) async {}\n\n    /// DELETE /resource/{id}\n    destroy(DoxRequest req, String id) async {}\n}\n</code></pre>"},{"location":"the-basic/installation/","title":"Installation","text":"<pre><code>dart pub global activate dox\n</code></pre>"},{"location":"the-basic/installation/#create-a-new-project","title":"Create a new project","text":"<pre><code>dox create new_blog\n</code></pre> <p>Export bin path</p> <p>Please make sure you have included <code>bin</code> path to your profile. If you did not added path to your profile yet, open <code>~/.bashrc</code> or <code>~/.zshrc</code> and paste below line.</p> <pre><code>export PATH=\"$PATH\":\"~/.pub-cache/bin\"\n</code></pre>"},{"location":"the-basic/installation/#create-a-specific-version","title":"Create a specific version","text":"<pre><code>dox create new_blog --version v2.0.0\n</code></pre>"},{"location":"the-basic/installation/#or-download-from-github","title":"Or download from github","text":"<pre><code>https://github.com/dartondox/dox-sample/archive/refs/tags/v2.0.0.zip\n</code></pre>"},{"location":"the-basic/installation/#start-server","title":"Start server","text":"<pre><code>dox s\n\nor \n\nbin/dox s\n</code></pre>"},{"location":"the-basic/installation/#start-server-with-docker","title":"Start server with docker","text":"<pre><code>docker-compose up -d --build\n</code></pre> <p>Tips</p> <p>Ensure that setting <code>APP_ENV</code> in <code>.env</code> to <code>development</code> facilitates server operations with hot reloading during development, while configuring it as <code>production</code> ensures compilation into machine code for server deployment.</p>"},{"location":"the-basic/installation/#watch-the-builder","title":"Watch the builder","text":"<pre><code>dart run build_runner watch \n\nor \n\ndox build_runner:watch\n</code></pre>"},{"location":"the-basic/middleware/","title":"Middleware","text":"<p>Middleware serves as a connector between routes and controllers, and its significance lies in bolstering the security, scalability, and adaptability of RESTful services.</p>"},{"location":"the-basic/middleware/#class-based-middleware","title":"Class based middleware","text":"Create <pre><code>dox create:middleware Logger\n</code></pre>"},{"location":"the-basic/middleware/#_1","title":"Middleware","text":"MiddlewareRoute <pre><code>class LoggerMiddleware extends IDoxMiddleware {\n    @override\n    handle(IDoxRequest req) {\n        /// write your logic here\n\n        /// return DoxRequest back to continue next to the controller\n        return req; \n    }\n}\n</code></pre> <pre><code>var loggerMiddleware = LoggerMiddleware();\nRoute.get('ping', [loggerMiddleware, webController.pong]);\n</code></pre>"},{"location":"the-basic/middleware/#function-based-middleware","title":"Function based middleware","text":"<p>If you prefer not to use class-based middleware, you have the option to create middleware functions and apply them to the route.</p>"},{"location":"the-basic/middleware/#_2","title":"Middleware","text":"MiddlewareRoute <pre><code>authMiddleware(DoxRequest req) {\n    /// write your logic here\n\n    /// return DoxRequest back to continue next to the controller\n    return req;\n}\n</code></pre> <pre><code>Route.get('ping', [ authMiddleware, webController.pong ]);\n</code></pre>"},{"location":"the-basic/middleware/#route-with-multi-middleware","title":"Route with multi-middleware","text":"Class based middlewareFunction middlewareControllerRoute <pre><code>class LoggerMiddleware extends IDoxMiddleware {\n    @override\n    handle(IDoxRequest req) {\n        /// write your logic here\n\n        /// return DoxRequest back to continue next to the controller\n        return req;\n    }\n}\n</code></pre> <pre><code>authMiddleware(DoxRequest req) {\n    /// write your logic here\n\n    /// return DoxRequest back to continue next to the controller\n    return req;\n}\n</code></pre> <pre><code>class WebController {\n    pong(DoxRequest req) async {\n        return 'pong';\n    }\n}\n</code></pre> <pre><code>Route.get('ping', [ loggerMiddleware, authMiddleware, webController.pong ]);\n</code></pre> <p>Info</p> <p>You can also combine class-based and function-based middleware.</p>"},{"location":"the-basic/request/","title":"Request","text":""},{"location":"the-basic/request/#request-body","title":"Request body","text":"<p>You can use the map function to retrieve body data using <code>req.body['keyword']</code>. You can use the <code>req.body</code> to retrieve data from both JSON body and request parameters, like <code>?foo=bar</code>, by utilizing the map function.</p> <pre><code>class ApiController {\n    sayHello(DoxRequest req) {\n        String name = req.body['name']\n        return 'Hello $name';\n    }\n}\n</code></pre>"},{"location":"the-basic/request/#route-param","title":"Route Param","text":"<p>Route parameters can be optional and can also be obtained from <code>req.param</code>.</p> <pre><code>Route.get('/hello/{name}');\n\nclass ApiController {\n    sayHello(DoxRequest req, String name) {\n        return 'Hello $name';\n    }\n}\n</code></pre>"},{"location":"the-basic/request/#form-data-file","title":"Form data (File)","text":"<p>To access the uploaded image file from the request, the code utilizes the <code>req.input('image')</code> method. This assumes that the incoming request is structured as a 'multipart/form-data' form with a file input field named <code>image</code>.</p> <pre><code>class ApiController {\n    uploadImage(DoxRequest req, String name) {\n        req.validate({\n            'image': 'required|image:png,jpg',\n        });\n\n        RequestFile image = req.input('image');\n        String uploadedPath = await image.store();\n\n        return {\"filename\" : uploadedPath};\n    }\n}\n</code></pre>"},{"location":"the-basic/request/#custom-form-request","title":"Custom Form Request","text":""},{"location":"the-basic/request/#step-1-create-a-request","title":"Step 1. Create a request","text":"<pre><code>dox create:request Blog\n</code></pre>"},{"location":"the-basic/request/#step-2-register-in-app","title":"Step 2. Register in app","text":"<p>Register a request in <code>lib/config/app.dart</code></p> <pre><code>formRequests: &lt;Type, FormRequest Function()&gt;{\n    BlogRequest:() =&gt; BlogRequest(),\n},\n</code></pre> <p>Why?</p> <p>If we don't utilize <code>dart:mirrors</code>, there isn't a straightforward method to instantiate a class from a string in Dart. Instead, we must register your request class in the <code>app.dart</code> file. As a result, Dox will seamlessly route the request to the corresponding controller.</p>"},{"location":"the-basic/request/#step-3-usage","title":"Step 3. Usage","text":"blog.request.dartblog.controller.dart <pre><code>import 'package:dox_core/dox_core.dart';\n\nclass BlogRequest extends FormRequest {\n    String? title;\n    String? description;\n\n    @override\n    void setUp() {\n        title = input('title');\n        description = input('desc');\n    }\n\n    @override\n    Map&lt;String, String&gt; rules() {\n        return {\n            'title': 'required',\n        };\n    }\n\n    @override\n    Map&lt;String, String&gt; messages() {\n        return {\n            'required': \"The {field} is required\"\n        };\n    }\n}\n</code></pre> <pre><code>class BlogController {\n    store(BlogRequest req) async {\n        Blog blog = Blog();\n\n        blog.title = req.title;\n        blog.description = req.description;\n\n        await blog.save();\n        return blog;\n    }\n}\n</code></pre>"},{"location":"the-basic/request/#setup","title":"<code>setUp</code>","text":"<p>Within this function, you have the opportunity to assign values to variables based on the incoming request, which can then be reused within the controller.</p>"},{"location":"the-basic/request/#rules","title":"<code>rules</code>","text":"<p>This function serves as the location for defining validation rules for input requests.</p>"},{"location":"the-basic/request/#messages","title":"<code>messages</code>","text":"<p>In this function, you have the ability to configure custom validation messages for input form request validation. Check here for more about validation.</p>"},{"location":"the-basic/response/","title":"Response","text":"<p>The response can take various forms, including strings, maps, models, serializers, lists of models, and various types of exceptions.</p> stringexceptionmap/jsonmodellist of modeldownloadstream <pre><code>/// string\nclass BlogController {\n    index(DoxRequest req) {\n        return 'pong';\n    }\n}\n</code></pre> <pre><code>/// exception\nclass BlogController {\n    index(DoxRequest req) {\n        return InternalErrorException();\n    }\n}\n</code></pre> <pre><code>/// map\nclass BlogController {\n    index(DoxRequest req) {\n        return {\"message\" : \"hello world!\"};\n    }\n}\n</code></pre> <pre><code>/// Model\nclass BlogController {\n    index(DoxRequest req) {\n        Admin admin = await Admin().find(1)\n        return admin;\n    }\n}\n</code></pre> <pre><code>/// List&lt;Model&gt;\nclass BlogController {\n    index(DoxRequest req) {\n        List admins = await Admin().all()\n        return admins;\n    }\n}\n</code></pre> <pre><code>/// List&lt;Model&gt;\nclass PdfController {\n    download(DoxRequest req) {\n        DownloadableFile file = await Storage().download('filename.pdf');\n\n        return file;\n    }\n}\n</code></pre> <pre><code>/// List&lt;Model&gt;\nclass PdfController {\n    download(DoxRequest req) {\n        StreamFile file = await Storage().stream('filename.pdf');\n\n        return file;\n    }\n}\n</code></pre> <p>Info</p> <p>Models and lists of models will be automatically converted into JSON format and arrays of JSON.</p>"},{"location":"the-basic/response/#with","title":"With","text":""},{"location":"the-basic/response/#headers","title":"Headers","text":"headerwithHeaders <pre><code>return response()\n    .header('Authorization', 'Bearer xxxxxx')\n    .header('ContentType', 'application/json');\n</code></pre> <pre><code>return response().withHeaders({\n    'Authorization' : 'Bearer xxxxxx',\n    'ContentType', 'application/json'\n});\n</code></pre>"},{"location":"the-basic/response/#status-code","title":"Status code","text":"<pre><code>return response().statusCode(401);\n</code></pre>"},{"location":"the-basic/response/#content-type","title":"Content type","text":"<pre><code>return response().contentType(ContentType.json);\n</code></pre>"},{"location":"the-basic/response/#stream","title":"Stream","text":"<pre><code>StreamFile file = await Storage().stream('filename.jpg');\n\nreturn response().stream(file.stream).contentType(file.contentType);\n</code></pre>"},{"location":"the-basic/response/#cookie","title":"Cookie","text":"Set cookieGet cookie <pre><code>var cookie = DoxCookie('key', 'value');\nreturn response().cookie(cookie);\n</code></pre> <pre><code>controllerMethod(DoxRequest req) {\n    cookie = req.cookie(key)\n}\n</code></pre> <p>Encrypt / Decrypt</p> <p>By default, a cookie's value is encrypted and decrypted using the <code>APP_KEY</code>. You can opt to disable encryption by setting <code>encrypt: false</code> when setting a cookie and disable decryption by setting <code>decode: false</code> when retrieving a cookie.</p>"},{"location":"the-basic/routing/","title":"Routing","text":"<p>Routes can be found in <code>lib/routes</code> folder. And <code>api.dart</code> is with prefix <code>/api</code>.</p>"},{"location":"the-basic/routing/#supported-routes","title":"Supported routes","text":"GETPOSTPUTPATCHDELETE <pre><code>Route.get(routeName, controller.method)\n</code></pre> <pre><code>Route.post(routeName, controller.method)\n</code></pre> <pre><code>Route.put(routeName, controller.method)\n</code></pre> <pre><code>Route.patch(routeName, controller.method)\n</code></pre> <pre><code>Route.delete(routeName, controller.method)\n</code></pre> <p>Info</p> <p>Other supported routes are <code>COPY</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>LINK</code>, <code>UNLINK</code>, <code>PURGE</code>, <code>LOCK</code>, <code>UNLOCK</code> and <code>VIEW</code>.</p>"},{"location":"the-basic/routing/#param-route","title":"Param route","text":"RouteController <pre><code>Route.get('/blog/{id}', info);\nRoute.get('/blog/{id}/activate', activate);\n</code></pre> <pre><code>info(DoxRequest req, String id) {\n    /// your response here\n}\n\nactivate(DoxRequest req, String id) {\n    /// your response here\n}\n</code></pre>"},{"location":"the-basic/routing/#group-routes","title":"Group Routes","text":"PrefixDomainMiddleware <pre><code>Route.group(prefix, () {\n    Route.get(path, controller.method);\n    Route.post(path, controller.method);\n});\n</code></pre> <pre><code>Route.domain('dartondox.com', () {\n    Route.get(path, controller.method);\n    Route.post(path, controller.method);\n});\n</code></pre> <pre><code>Route.middleware([CustomMiddleware()], () {\n    Route.get(path, controller.method);\n    Route.post(path, controller.method);\n});\n</code></pre>"},{"location":"the-basic/routing/#resource","title":"Resource","text":"<pre><code>Route.resource('blogs', BlogController());\n</code></pre> indexcreatestoreshoweditupdatedestroy <pre><code>GET /blogs\n</code></pre> <pre><code>GET /blogs/create\n</code></pre> <pre><code>POST /blogs\n</code></pre> <pre><code>GET /blogs/{id}\n</code></pre> <pre><code>GET /blogs/{id}/edit\n</code></pre> <pre><code>PUT|PATCH /blogs/{id}\n</code></pre> <pre><code>DELETE /blogs/{id}\n</code></pre> <p>Info</p> <p><code>index</code>, <code>create</code>, <code>store</code>, <code>show</code>, <code>edit</code>, <code>update</code> and <code>destroy</code> are controller methods. Check here documentation for generating resource controller.</p>"},{"location":"the-basic/routing/#route-with-callback","title":"Route with callback","text":"<pre><code>Route.get('/ping', (DoxRequest req) =&gt; 'pong');\n</code></pre>"},{"location":"the-basic/routing/#route-with-controller","title":"Route with controller","text":"RouteController <pre><code>var webController = WebController();\nRoute.get('ping', webController.pong);\n/// or \nRoute.get('ping', [webController.pong]);\n</code></pre> <pre><code>class WebController {\n    pong(DoxRequest req) async {\n        return 'pong';\n    }\n}\n</code></pre>"},{"location":"the-basic/routing/#class-based-middleware","title":"Class based middleware","text":"RouteMiddleware <pre><code>var loggerMiddleware = LoggerMiddleware();\nRoute.get('ping', [loggerMiddleware, webController.pong]);\n</code></pre> <pre><code>class LoggerMiddleware extends DoxMiddleware {\n    @override\n    handle(DoxRequest req) {\n        /// write your logic here\n\n        /// return DoxRequest back to continue next function (controller)\n        return req;\n    }\n}\n</code></pre> <p>Info</p> <p>To implement class-based middleware, you can create a new class that extends the <code>DoxMiddleware</code> class. Within this new class, you'll need to define a handle method where you can incorporate your custom logic.</p>"},{"location":"the-basic/routing/#function-middleware","title":"Function middleware","text":"RouteFunction <pre><code>Route.get('ping', [authMiddleware, webController.pong]);\n</code></pre> <pre><code>authMiddleware(DoxRequest req) {\n    /// write your logic here\n\n    /// return DoxRequest back to continue next function (controller)\n    return req;\n}\n</code></pre> <p>Info</p> <p>To create function-based middleware, you can define a function that takes a DoxRequest parameter.</p>"},{"location":"the-basic/routing/#route-with-multi-middleware","title":"Route with multi-middleware","text":"RouteClass based middlewareFunction middlewareController <pre><code>Route.get('ping', [ loggerMiddleware, authMiddleware, webController.pong ]);\n</code></pre> <pre><code>class LoggerMiddleware extends IDoxMiddleware {\n    @override\n    handle(IDoxRequest req) {\n        /// write your logic here\n\n        /// return DoxRequest back to continue next to the controller\n        return req;\n    }\n}\n</code></pre> <pre><code>authMiddleware(DoxRequest req) {\n    /// write your logic here\n\n    /// return DoxRequest back to continue next to the controller\n    return req;\n}\n</code></pre> <pre><code>class WebController {\n    pong(DoxRequest req) async {\n        return 'pong';\n    }\n}\n</code></pre>"},{"location":"the-basic/validation/","title":"Validation","text":"<p>Dox offers multiple approaches for validating the request data in your application.</p> ValidationRequest body <pre><code>class BlogController {\n    create(DoxRequest req) {\n        req.validate({\n            'title': 'required|string|alpha',\n            'body' : 'required|string',\n            'status' : 'required|in:active,draft',\n        });\n\n        ....\n    }\n}\n</code></pre> <pre><code>{\n    \"title\" : \"Dartondox\",\n    \"body\" : \"A perfect solution for your web backend development with dart, a comprehensive and versatile framework that offers a wide range of features to help you build powerful and scalable web applications.\",\n    \"status\" : \"active\",\n}\n</code></pre> <p>Tip</p> <p>Multiple rules can be separated by a vertical bar, represented as \" | \".</p>"},{"location":"the-basic/validation/#custom-validation-message","title":"Custom validation message","text":"<pre><code>class BlogController {\n    create(DoxRequest req) {\n        req.validate({\n                'title': 'required',\n                'email': 'required|email',\n            },\n            messages: {\n                'required' : 'the {field} is required',\n                'email' : 'the {value} is not valid email',\n            },\n        );\n    }\n}\n</code></pre> <p>Info</p> <p>The validator will automatically substitute <code>{field}</code> and <code>{value}</code> with the corresponding request field and its value.</p>"},{"location":"the-basic/validation/#nested-validation","title":"Nested Validation","text":"ValidationRequest body <pre><code>class AddressController {\n    create(DoxRequest req) {\n        req.validate({\n            'address.city': 'required',\n            'address.post_code': 'required|numeric',\n            'address.street.street_1': 'required',\n            'address.street.street_2': 'required',\n        });\n\n        ....\n    }\n}\n</code></pre> <pre><code>{\n    \"address\" : {\n        \"city\" : \"Bangkok\",\n        \"post_code\" : \"10110\",\n        \"street\" : {\n            \"street_1\" : \"Chok Choi 4\",\n            \"street_2\" : \"23/41 Main\",\n        }\n    }\n}\n</code></pre>"},{"location":"the-basic/validation/#nested-with-array","title":"Nested with array","text":"ValidationRequest body <pre><code>class ProductController {\n    create(DoxRequest req) {\n        req.validate({\n            'products.*.item': 'required',\n            'products.*.base_price': 'required|double',\n            'products.*.options.*.name': 'required',\n            'products.*.options.*.price': 'required',\n        });\n\n        ....\n    }\n}\n</code></pre> <pre><code>{\n    \"products\" : [\n        {\n            \"item\": \"Shoes\",\n            \"base_price\": \"20000\",\n            \"options\":  [\n                {\"name\" : \"red\", \"price\" : \"21000\"},\n                {\"name\" : \"blue\", \"price\" : \"22000\"},\n            ]\n        },\n        {\n            \"item\": \"Nike\",\n            \"base_price\": \"35000\",\n            \"options\":  [\n                {\"name\" : \"green\", \"price\" : \"37000\"},\n                {\"name\" : \"purple\", \"price\" : \"38000\"},\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"the-basic/validation/#rules","title":"Rules","text":""},{"location":"the-basic/validation/#required","title":"<code>required</code>","text":"<pre><code>req.validate({\n    'name': 'required',\n});\n</code></pre>"},{"location":"the-basic/validation/#required_if","title":"<code>required_if</code>","text":"<pre><code>req.validate({\n    'name': 'required_if:status,active',\n    'status': 'in:active,inactive'\n});\n</code></pre> <p>Info</p> <p>Name is required if status is active.</p>"},{"location":"the-basic/validation/#required_if_not","title":"<code>required_if_not</code>","text":"<pre><code>req.validate({\n    'name': 'required_if_not:status,active',\n    'status': 'in:active,inactive'\n});\n</code></pre> <p>Info</p> <p>Name is required if status is inactive.</p>"},{"location":"the-basic/validation/#email","title":"<code>email</code>","text":"<pre><code>req.validate({\n    'user_email': 'email',\n});\n</code></pre>"},{"location":"the-basic/validation/#string","title":"<code>string</code>","text":"<pre><code>req.validate({\n    'title': 'string',\n});\n</code></pre>"},{"location":"the-basic/validation/#numeric","title":"<code>numeric</code>","text":"<pre><code>req.validate({\n    'price': 'numeric',\n});\n</code></pre>"},{"location":"the-basic/validation/#boolean","title":"<code>boolean</code>","text":"<pre><code>req.validate({\n    'is_guest': 'boolean',\n});\n</code></pre>"},{"location":"the-basic/validation/#integer","title":"<code>integer</code>","text":"<pre><code>req.validate({\n    'price': 'integer',\n});\n</code></pre>"},{"location":"the-basic/validation/#array","title":"<code>array</code>","text":"<pre><code>req.validate({\n    'product_ids': 'array',\n});\n</code></pre>"},{"location":"the-basic/validation/#json","title":"<code>json</code>","text":"<pre><code>req.validate({\n    'product': 'json',\n});\n</code></pre>"},{"location":"the-basic/validation/#ip","title":"<code>ip</code>","text":"<pre><code>req.validate({\n    'user_ip_address': 'ip',\n});\n</code></pre>"},{"location":"the-basic/validation/#alpha","title":"<code>alpha</code>","text":"<pre><code>req.validate({\n    'title': 'alpha',\n});\n</code></pre>"},{"location":"the-basic/validation/#alpha_dash","title":"<code>alpha_dash</code>","text":"<pre><code>req.validate({\n    'order_number': 'alpha_dash',\n});\n</code></pre>"},{"location":"the-basic/validation/#alpha_numeric","title":"<code>alpha_numeric</code>","text":"<pre><code>req.validate({\n    'order_number': 'alpha_numeric',\n});\n</code></pre>"},{"location":"the-basic/validation/#date","title":"<code>date</code>","text":"<pre><code>req.validate({\n    'dob': 'date',\n});\n</code></pre>"},{"location":"the-basic/validation/#url","title":"<code>url</code>","text":"<pre><code>req.validate({\n    'return_url': 'url',\n});\n</code></pre>"},{"location":"the-basic/validation/#uuid","title":"<code>uuid</code>","text":"<pre><code>req.validate({\n    'user_id': 'uuid',\n});\n</code></pre>"},{"location":"the-basic/validation/#in","title":"<code>in</code>","text":"<pre><code>req.validate({\n    'status': 'in:active,inactive',\n});\n</code></pre> <p>Info</p> <p>Status field must be one of active or inactive status.</p>"},{"location":"the-basic/validation/#not_in","title":"<code>not_in</code>","text":"<pre><code>req.validate({\n    'status': 'not_in:active,inactive',\n});\n</code></pre>"},{"location":"the-basic/validation/#start_with","title":"<code>start_with</code>","text":"<pre><code>req.validate({\n    'title': 'start_with:dox',\n});\n</code></pre> <p>Info</p> <p>Title string must start with text <code>dox</code>.</p>"},{"location":"the-basic/validation/#end_with","title":"<code>end_with</code>","text":"<pre><code>req.validate({\n    'title': 'end_with:framework',\n});\n</code></pre> <p>Info</p> <p>Title string must end with text <code>framework</code>.</p>"},{"location":"the-basic/validation/#confirmed","title":"<code>confirmed</code>","text":"<p>Confirm can be used to verify password.</p> ValidationRequest body <pre><code>req.validate({\n    'password': 'confirmed',\n});\n</code></pre> <pre><code>{\n    \"password\" =&gt; \"12345678\"\n    \"password_confirmation\" =&gt; \"12345678\"\n}\n</code></pre> <p>Info</p> <p>By default, it will verify against the <code>password_confirmation</code> field. However, you can also employ a custom name to confirm the password.</p> <pre><code>req.validate({\n    'password': 'confirmed:confirm_password'\n});\n</code></pre> Request body <pre><code>{\n    \"password\" =&gt; \"12345678\"\n    \"confirm_password\" =&gt; \"12345678\"\n}\n</code></pre>"},{"location":"the-basic/validation/#image","title":"<code>image</code>","text":"All image extensionsOnly specific image extensions <pre><code>request.validate({\n    'profile_pic': 'image',\n});\n</code></pre> <pre><code>request.validate({\n    'profile_pic': 'image:png,jpeg,gif,jpg',\n});\n</code></pre>"},{"location":"the-basic/validation/#file","title":"<code>file</code>","text":"All file extensionsOnly specific file extensions <pre><code>request.validate({\n    'attachment': 'file',\n});\n</code></pre> <pre><code>request.validate({\n    'attachment': 'file:png,pdf,docx',\n});\n</code></pre>"},{"location":"the-basic/validation/#character","title":"character","text":""},{"location":"the-basic/validation/#min_length","title":"<code>min_length</code>","text":"<pre><code>req.validate({\n    'title': 'min_length:20',\n});\n</code></pre>"},{"location":"the-basic/validation/#max_length","title":"<code>max_length</code>","text":"<pre><code>req.validate({\n    'title': 'max_length:100',\n});\n</code></pre>"},{"location":"the-basic/validation/#length_between","title":"<code>length_between</code>","text":"<pre><code>req.validate({\n    'title': 'length_between:20,100',\n});\n</code></pre>"},{"location":"the-basic/validation/#number","title":"number","text":""},{"location":"the-basic/validation/#min","title":"<code>min</code>","text":"<pre><code>req.validate({\n    'price': 'min:20',\n});\n</code></pre>"},{"location":"the-basic/validation/#max","title":"<code>max</code>","text":"<pre><code>req.validate({\n    'price': 'max:100',\n});\n</code></pre>"},{"location":"the-basic/validation/#between","title":"<code>between</code>","text":"<pre><code>req.validate({\n    'price': 'between:20,100',\n});\n</code></pre>"},{"location":"the-basic/validation/#greater_than","title":"<code>greater_than</code>","text":"<pre><code>req.validate({\n    'price': 'greater_than:20',\n});\n</code></pre>"},{"location":"the-basic/validation/#less_than","title":"<code>less_than</code>","text":"<pre><code>req.validate({\n    'price': 'less_than:100',\n});\n</code></pre>"}]}